version: '3.8'

services:
  mongo:
    image: sha256:ab6556e6d71d9773dd74002db924dc637abb49d079d6ef945982af3078fdf22c
    container_name: mongo
    environment:
      MONGO_INITDB_REPLICA_SET: rs0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
    command: ["mongod", "--replSet", "rs0"]

  ldap-server:
    image: osixia/openldap:1.5.0
    container_name: ldap-server
    environment:
      LDAP_ORGANISATION: "Test Org"
      LDAP_DOMAIN: "example.org"
      LDAP_ADMIN_PASSWORD: "admin"
    ports:
      - "389:389"
      - "636:636"
    networks:
      - backend

  # ldap-ui:
  #   image: osixia/phpldapadmin:0.9.0
  #   container_name: ldap-ui
  #   environment:
  #     PHPLDAPADMIN_LDAP_HOSTS: ldap-server
  #     PHPLDAPADMIN_HTTPS: "false"
  #   ports:
  #     - "8081:80"
  #   networks:
  #     - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"    # внутренний PLAINTEXT
      - "29092:29092"  # внешний PLAINTEXT_HOST
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
    - grafana_data:/var/lib/grafana 
    ports:
      - "3003:3000"
    depends_on:
      - prometheus
    networks:
      - backend

  # pad:
  #   image: quay.io/aicoe/prometheus-anomaly-detector:latest
  #   container_name: pad
  #   environment:
  #     - FLT_PROM_URL=http://prometheus:9090
  #     - FLT_METRICS_LIST=http_requests_total{job="gateway"};http_requests_failed_total{job="gateway"};rate_limit_hits_total{job="gateway"};failed_login_attempts_total{job="gateway"};account_lockouts_total{job="gateway"}
  #     - FLT_RETRAINING_INTERVAL_MINUTES=1
  #     - FLT_ROLLING_TRAINING_WINDOW_SIZE=3m
  #     - APP_FILE=app.py
  #     - FLT_DATA_START_TIME=3m
  #   ports:
  #     - "8085:8080"
  #   volumes:
  #     - pad-models:/opt/app-root/src/models
  #     - ./my_custom_app.py:/opt/app-root/src/app.py:ro
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - backend
  
  # pad-proxy:
  #   image: nginx:alpine
  #   container_name: pad-proxy
  #   ports:
  #     - "8086:8080"
  #   networks:
  #     - backend
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro

volumes:
  mongo_data:
  prometheus_data:
  grafana_data:
  # pad-models:

networks:
  backend:
    driver: bridge
